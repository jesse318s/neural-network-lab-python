#pos = positon, vel = velocity, mag=magnetic 

def KineticComponet(xVel, yVel):
  return (xVely**2+yVel**2)/2

def magneticPotential(magnField,yPos,xPos,xVel,yVel,charge):
  crossProduct=(yPos*xVel-xPos*yVel)
  magFieldPotential=abs(charge*magField*crossProduct)
  return magFieldPotential
  
def (magField, charge,xPosOrig, yPosnOrig,  xVelOrig, yVelOrig, xPosNow, yPosNow,  xVelNow, yVelNow):
  KCOrig, KCNow=KineticComponet(xVelyOrig, yVelOrig), kineticComponet(xVelNow, yVelNow) 
  magPotentialOrig=magneticPotential(magField,yPosOrig,xPosOrig,xVelOrig,yVelOrig)
  magPotentialNow=magneticPotential(magField,yPosNow,xPosNow,xVelNow,yVelNow)
  diff=KCNow-KCOrig+magPotentialNow-magPotentialOrig
  return abs(diff)

#energy in system must remain constant, that is, potential + kinetic
#This sees if that remains true, mass is ignored because it can be factored out
#magnetic potential comes from charge * MagneticField x Velocity (the Lorentz Force), where cross product is x
#To find the cross product, or to find the component of velocity traveling perpendicular to the magnetic field, 
#if we assume the field is centered at the origin (0,0)
#It is Velocity x Location, dividing by distance from origin would give velocity component in the right direction, but we do not do that as
#that extra distance component converts force to energy
#we need the absolute value of this, as the potential field could be pointing in two different directions towards or away, 
#but we only care about the magnitude
# This loss function makes sure part of physics is followed, but cannot give exact answers

